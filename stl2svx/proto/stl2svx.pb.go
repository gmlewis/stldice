// Code generated by protoc-gen-go.
// source: stl2svx.proto
// DO NOT EDIT!

/*
Package stl2svx is a generated protocol buffer package.

It is generated from these files:
	stl2svx.proto

It has these top-level messages:
	NewJobRequest
	NewJobResponse
	RegisterAgentRequest
	RegisterAgentResponse
	SliceJobRequest
	SliceJobResponse
	STLFile
	Triangle
	Vertex
*/
package stl2svx

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// NewJobRequest is the request to start a new job.
type NewJobRequest struct {
	StlFiles []*STLFile `protobuf:"bytes,1,rep,name=stl_files,json=stlFiles" json:"stl_files,omitempty"`
	Dim      int64      `protobuf:"varint,2,opt,name=dim" json:"dim,omitempty"`
	// The number of divisions across each dimension. Ideally, this would be
	// calculated by the master based upon the size and complexity of the model,
	// but for now let the client decide so that it is easy to run experiments
	// without having to change the server.
	NX        int64  `protobuf:"varint,3,opt,name=n_x,json=nX" json:"n_x,omitempty"`
	NY        int64  `protobuf:"varint,4,opt,name=n_y,json=nY" json:"n_y,omitempty"`
	NZ        int64  `protobuf:"varint,5,opt,name=n_z,json=nZ" json:"n_z,omitempty"`
	OutPrefix string `protobuf:"bytes,6,opt,name=out_prefix,json=outPrefix" json:"out_prefix,omitempty"`
}

func (m *NewJobRequest) Reset()                    { *m = NewJobRequest{} }
func (m *NewJobRequest) String() string            { return proto.CompactTextString(m) }
func (*NewJobRequest) ProtoMessage()               {}
func (*NewJobRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *NewJobRequest) GetStlFiles() []*STLFile {
	if m != nil {
		return m.StlFiles
	}
	return nil
}

func (m *NewJobRequest) GetDim() int64 {
	if m != nil {
		return m.Dim
	}
	return 0
}

func (m *NewJobRequest) GetNX() int64 {
	if m != nil {
		return m.NX
	}
	return 0
}

func (m *NewJobRequest) GetNY() int64 {
	if m != nil {
		return m.NY
	}
	return 0
}

func (m *NewJobRequest) GetNZ() int64 {
	if m != nil {
		return m.NZ
	}
	return 0
}

func (m *NewJobRequest) GetOutPrefix() string {
	if m != nil {
		return m.OutPrefix
	}
	return ""
}

// NewJobResponse is the resulting SVX file from a job.
type NewJobResponse struct {
	SvxFile []byte `protobuf:"bytes,1,opt,name=svx_file,json=svxFile,proto3" json:"svx_file,omitempty"`
	Error   string `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (m *NewJobResponse) Reset()                    { *m = NewJobResponse{} }
func (m *NewJobResponse) String() string            { return proto.CompactTextString(m) }
func (*NewJobResponse) ProtoMessage()               {}
func (*NewJobResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *NewJobResponse) GetSvxFile() []byte {
	if m != nil {
		return m.SvxFile
	}
	return nil
}

func (m *NewJobResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

// RegisterAgentRequest is sent from each agent to the master.
type RegisterAgentRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
}

func (m *RegisterAgentRequest) Reset()                    { *m = RegisterAgentRequest{} }
func (m *RegisterAgentRequest) String() string            { return proto.CompactTextString(m) }
func (*RegisterAgentRequest) ProtoMessage()               {}
func (*RegisterAgentRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *RegisterAgentRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// RegisterAgentResponse is the reply from the master to the agent.
type RegisterAgentResponse struct {
}

func (m *RegisterAgentResponse) Reset()                    { *m = RegisterAgentResponse{} }
func (m *RegisterAgentResponse) String() string            { return proto.CompactTextString(m) }
func (*RegisterAgentResponse) ProtoMessage()               {}
func (*RegisterAgentResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

// SliceJobRequests represents an entire job slice to be performed.
type SliceJobRequest struct {
	NewJobRequest *NewJobRequest `protobuf:"bytes,1,opt,name=new_job_request,json=newJobRequest" json:"new_job_request,omitempty"`
	Z             int64          `protobuf:"varint,2,opt,name=z" json:"z,omitempty"`
}

func (m *SliceJobRequest) Reset()                    { *m = SliceJobRequest{} }
func (m *SliceJobRequest) String() string            { return proto.CompactTextString(m) }
func (*SliceJobRequest) ProtoMessage()               {}
func (*SliceJobRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *SliceJobRequest) GetNewJobRequest() *NewJobRequest {
	if m != nil {
		return m.NewJobRequest
	}
	return nil
}

func (m *SliceJobRequest) GetZ() int64 {
	if m != nil {
		return m.Z
	}
	return 0
}

// SliceJobResponse is the resulting PNG file from a job slice.
type SliceJobResponse struct {
	PngFile []byte `protobuf:"bytes,1,opt,name=png_file,json=pngFile,proto3" json:"png_file,omitempty"`
	Error   string `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (m *SliceJobResponse) Reset()                    { *m = SliceJobResponse{} }
func (m *SliceJobResponse) String() string            { return proto.CompactTextString(m) }
func (*SliceJobResponse) ProtoMessage()               {}
func (*SliceJobResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *SliceJobResponse) GetPngFile() []byte {
	if m != nil {
		return m.PngFile
	}
	return nil
}

func (m *SliceJobResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

// STLFile contains the data in an STL file.
type STLFile struct {
	Triangles []*Triangle `protobuf:"bytes,1,rep,name=triangles" json:"triangles,omitempty"`
}

func (m *STLFile) Reset()                    { *m = STLFile{} }
func (m *STLFile) String() string            { return proto.CompactTextString(m) }
func (*STLFile) ProtoMessage()               {}
func (*STLFile) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *STLFile) GetTriangles() []*Triangle {
	if m != nil {
		return m.Triangles
	}
	return nil
}

// Triangle is a 3-vertex triangle in the mesh.
type Triangle struct {
	V1 *Vertex `protobuf:"bytes,1,opt,name=v1" json:"v1,omitempty"`
	V2 *Vertex `protobuf:"bytes,2,opt,name=v2" json:"v2,omitempty"`
	V3 *Vertex `protobuf:"bytes,3,opt,name=v3" json:"v3,omitempty"`
}

func (m *Triangle) Reset()                    { *m = Triangle{} }
func (m *Triangle) String() string            { return proto.CompactTextString(m) }
func (*Triangle) ProtoMessage()               {}
func (*Triangle) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Triangle) GetV1() *Vertex {
	if m != nil {
		return m.V1
	}
	return nil
}

func (m *Triangle) GetV2() *Vertex {
	if m != nil {
		return m.V2
	}
	return nil
}

func (m *Triangle) GetV3() *Vertex {
	if m != nil {
		return m.V3
	}
	return nil
}

// Vertex is a 3D vertex.
type Vertex struct {
	X float64 `protobuf:"fixed64,1,opt,name=x" json:"x,omitempty"`
	Y float64 `protobuf:"fixed64,2,opt,name=y" json:"y,omitempty"`
	Z float64 `protobuf:"fixed64,3,opt,name=z" json:"z,omitempty"`
}

func (m *Vertex) Reset()                    { *m = Vertex{} }
func (m *Vertex) String() string            { return proto.CompactTextString(m) }
func (*Vertex) ProtoMessage()               {}
func (*Vertex) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *Vertex) GetX() float64 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *Vertex) GetY() float64 {
	if m != nil {
		return m.Y
	}
	return 0
}

func (m *Vertex) GetZ() float64 {
	if m != nil {
		return m.Z
	}
	return 0
}

func init() {
	proto.RegisterType((*NewJobRequest)(nil), "stl2svx.NewJobRequest")
	proto.RegisterType((*NewJobResponse)(nil), "stl2svx.NewJobResponse")
	proto.RegisterType((*RegisterAgentRequest)(nil), "stl2svx.RegisterAgentRequest")
	proto.RegisterType((*RegisterAgentResponse)(nil), "stl2svx.RegisterAgentResponse")
	proto.RegisterType((*SliceJobRequest)(nil), "stl2svx.SliceJobRequest")
	proto.RegisterType((*SliceJobResponse)(nil), "stl2svx.SliceJobResponse")
	proto.RegisterType((*STLFile)(nil), "stl2svx.STLFile")
	proto.RegisterType((*Triangle)(nil), "stl2svx.Triangle")
	proto.RegisterType((*Vertex)(nil), "stl2svx.Vertex")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Master service

type MasterClient interface {
	// NewJob starts a new job from the client.
	NewJob(ctx context.Context, in *NewJobRequest, opts ...grpc.CallOption) (*NewJobResponse, error)
	// RegisterAgent notifies the master that a new agent is ready.
	RegisterAgent(ctx context.Context, in *RegisterAgentRequest, opts ...grpc.CallOption) (*RegisterAgentResponse, error)
}

type masterClient struct {
	cc *grpc.ClientConn
}

func NewMasterClient(cc *grpc.ClientConn) MasterClient {
	return &masterClient{cc}
}

func (c *masterClient) NewJob(ctx context.Context, in *NewJobRequest, opts ...grpc.CallOption) (*NewJobResponse, error) {
	out := new(NewJobResponse)
	err := grpc.Invoke(ctx, "/stl2svx.Master/NewJob", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClient) RegisterAgent(ctx context.Context, in *RegisterAgentRequest, opts ...grpc.CallOption) (*RegisterAgentResponse, error) {
	out := new(RegisterAgentResponse)
	err := grpc.Invoke(ctx, "/stl2svx.Master/RegisterAgent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Master service

type MasterServer interface {
	// NewJob starts a new job from the client.
	NewJob(context.Context, *NewJobRequest) (*NewJobResponse, error)
	// RegisterAgent notifies the master that a new agent is ready.
	RegisterAgent(context.Context, *RegisterAgentRequest) (*RegisterAgentResponse, error)
}

func RegisterMasterServer(s *grpc.Server, srv MasterServer) {
	s.RegisterService(&_Master_serviceDesc, srv)
}

func _Master_NewJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).NewJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stl2svx.Master/NewJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).NewJob(ctx, req.(*NewJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Master_RegisterAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).RegisterAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stl2svx.Master/RegisterAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).RegisterAgent(ctx, req.(*RegisterAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Master_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stl2svx.Master",
	HandlerType: (*MasterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewJob",
			Handler:    _Master_NewJob_Handler,
		},
		{
			MethodName: "RegisterAgent",
			Handler:    _Master_RegisterAgent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stl2svx.proto",
}

// Client API for Agent service

type AgentClient interface {
	// SliceJob slices an entire job at the given Z height and returns the image.
	SliceJob(ctx context.Context, in *SliceJobRequest, opts ...grpc.CallOption) (*SliceJobResponse, error)
}

type agentClient struct {
	cc *grpc.ClientConn
}

func NewAgentClient(cc *grpc.ClientConn) AgentClient {
	return &agentClient{cc}
}

func (c *agentClient) SliceJob(ctx context.Context, in *SliceJobRequest, opts ...grpc.CallOption) (*SliceJobResponse, error) {
	out := new(SliceJobResponse)
	err := grpc.Invoke(ctx, "/stl2svx.Agent/SliceJob", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Agent service

type AgentServer interface {
	// SliceJob slices an entire job at the given Z height and returns the image.
	SliceJob(context.Context, *SliceJobRequest) (*SliceJobResponse, error)
}

func RegisterAgentServer(s *grpc.Server, srv AgentServer) {
	s.RegisterService(&_Agent_serviceDesc, srv)
}

func _Agent_SliceJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SliceJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).SliceJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stl2svx.Agent/SliceJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).SliceJob(ctx, req.(*SliceJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Agent_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stl2svx.Agent",
	HandlerType: (*AgentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SliceJob",
			Handler:    _Agent_SliceJob_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stl2svx.proto",
}

func init() { proto.RegisterFile("stl2svx.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 476 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x53, 0x41, 0x6f, 0xd3, 0x30,
	0x14, 0xc6, 0x0d, 0x4d, 0x9b, 0xb7, 0x95, 0x16, 0x6b, 0x30, 0xaf, 0xd2, 0xa0, 0xca, 0xa9, 0x17,
	0x06, 0x4b, 0x6f, 0x20, 0x21, 0x55, 0x48, 0x1c, 0x26, 0x40, 0x93, 0x37, 0x21, 0xe0, 0x12, 0xb5,
	0xd4, 0x8b, 0x82, 0x32, 0x27, 0xd8, 0x6e, 0x96, 0xf6, 0x8f, 0x70, 0xe7, 0x97, 0xa2, 0xd8, 0x71,
	0x43, 0x20, 0xdd, 0xcd, 0xef, 0xf3, 0xf3, 0xf7, 0xde, 0xfb, 0xbe, 0x67, 0x18, 0x48, 0x95, 0x04,
	0x32, 0x2f, 0xce, 0x32, 0x91, 0xaa, 0x14, 0xf7, 0xaa, 0xd0, 0xff, 0x8d, 0x60, 0xf0, 0x89, 0xdd,
	0x5d, 0xa4, 0x4b, 0xca, 0x7e, 0xae, 0x99, 0x54, 0xf8, 0x05, 0x78, 0x52, 0x25, 0xe1, 0x4d, 0x9c,
	0x30, 0x49, 0xd0, 0xc4, 0x99, 0x1e, 0x04, 0xa3, 0x33, 0xfb, 0xfa, 0xea, 0xfa, 0xc3, 0xfb, 0x38,
	0x61, 0xb4, 0x2f, 0x55, 0x52, 0x1e, 0x24, 0x1e, 0x81, 0xb3, 0x8a, 0x6f, 0x49, 0x67, 0x82, 0xa6,
	0x0e, 0x2d, 0x8f, 0x78, 0x08, 0x0e, 0x0f, 0x0b, 0xe2, 0x68, 0xa4, 0xc3, 0xbf, 0x18, 0x60, 0x43,
	0x1e, 0x56, 0xc0, 0x57, 0x03, 0x6c, 0x49, 0xb7, 0x02, 0xbe, 0xe1, 0x53, 0x80, 0x74, 0xad, 0xc2,
	0x4c, 0xb0, 0x9b, 0xb8, 0x20, 0xee, 0x04, 0x4d, 0x3d, 0xea, 0xa5, 0x6b, 0x75, 0xa9, 0x01, 0x7f,
	0x0e, 0x8f, 0x6c, 0x8f, 0x32, 0x4b, 0xb9, 0x64, 0xf8, 0x04, 0xfa, 0x32, 0x2f, 0x74, 0x93, 0x04,
	0x4d, 0xd0, 0xf4, 0x90, 0xf6, 0x64, 0x5e, 0x94, 0x1d, 0xe1, 0x23, 0xe8, 0x32, 0x21, 0x52, 0xa1,
	0x5b, 0xf2, 0xa8, 0x09, 0xfc, 0x57, 0x70, 0x44, 0x59, 0x14, 0x4b, 0xc5, 0xc4, 0x3c, 0x62, 0x5c,
	0xd9, 0x69, 0x09, 0xf4, 0x16, 0xab, 0x95, 0x60, 0x52, 0x6a, 0x1e, 0x8f, 0xda, 0xd0, 0x3f, 0x86,
	0x27, 0xff, 0xbc, 0x30, 0xb5, 0xfd, 0x10, 0x86, 0x57, 0x49, 0xfc, 0x9d, 0xfd, 0xa5, 0xd9, 0x5b,
	0x18, 0x72, 0x76, 0x17, 0xfe, 0x48, 0x97, 0xa1, 0x30, 0x90, 0x66, 0x3b, 0x08, 0x9e, 0xee, 0x94,
	0x6b, 0x88, 0x4c, 0x07, 0xbc, 0xa1, 0xf9, 0x21, 0xa0, 0x6d, 0x25, 0x21, 0xda, 0xfa, 0xef, 0x60,
	0x54, 0x17, 0xa8, 0x07, 0xce, 0x78, 0xd4, 0x18, 0x38, 0xe3, 0xd1, 0x3d, 0x03, 0xbf, 0x86, 0x5e,
	0x65, 0x16, 0x7e, 0x09, 0x9e, 0x12, 0xf1, 0x82, 0x47, 0xb5, 0xa3, 0x8f, 0x77, 0x7d, 0x5d, 0x57,
	0x37, 0xb4, 0xce, 0xf1, 0x6f, 0xa1, 0x6f, 0x61, 0xfc, 0x1c, 0x3a, 0xf9, 0x79, 0x35, 0xcd, 0x70,
	0xf7, 0xea, 0x33, 0x13, 0x8a, 0x15, 0xb4, 0x93, 0x9f, 0xeb, 0x84, 0x40, 0xd7, 0x6e, 0x4d, 0x08,
	0x74, 0xc2, 0x4c, 0xaf, 0x43, 0x6b, 0xc2, 0xcc, 0x0f, 0xc0, 0x35, 0x51, 0xa9, 0x43, 0xa1, 0x6b,
	0x21, 0x8a, 0x74, 0xb4, 0xd1, 0xc4, 0x88, 0xa2, 0x8d, 0xd1, 0xc8, 0x31, 0xd1, 0x36, 0xf8, 0x85,
	0xc0, 0xfd, 0xb8, 0x28, 0xcd, 0xc1, 0x6f, 0xc0, 0x35, 0xe2, 0xe2, 0x3d, 0x6a, 0x8f, 0x8f, 0xff,
	0xc3, 0x2b, 0x2b, 0x1f, 0xe0, 0x4b, 0x18, 0x34, 0x5c, 0xc6, 0xa7, 0xbb, 0xdc, 0xb6, 0x7d, 0x19,
	0x3f, 0xdb, 0x77, 0x6d, 0x19, 0x83, 0x0b, 0xe8, 0x1a, 0xa6, 0x39, 0xf4, 0xad, 0x8d, 0x98, 0xd4,
	0x3f, 0xa8, 0xb9, 0x3a, 0xe3, 0x93, 0x96, 0x1b, 0xcb, 0xb5, 0x74, 0xf5, 0x6f, 0x9d, 0xfd, 0x09,
	0x00, 0x00, 0xff, 0xff, 0x75, 0x4f, 0xc9, 0x82, 0xbe, 0x03, 0x00, 0x00,
}
